"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AcceptControlBody = _interopRequireDefault(require("../sunshine-conversations-client.model/AcceptControlBody"));

var _OfferControlBody = _interopRequireDefault(require("../sunshine-conversations-client.model/OfferControlBody"));

var _PassControlBody = _interopRequireDefault(require("../sunshine-conversations-client.model/PassControlBody"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* SwitchboardActions service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/SwitchboardActionsApi
* @version 9.4.5
*/
var SwitchboardActionsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SwitchboardActionsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/SwitchboardActionsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function SwitchboardActionsApi(apiClient) {
    _classCallCheck(this, SwitchboardActionsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Accept Control
   * The acceptControl action transfers the control of the conversation to the pending switchboard integration. When using integration auth scope, a 403 is returned if the pending switchboard integration is not the authenticated integration.
   * @param {String} appId Identifies the app.
   * @param {String} conversationId Identifies the conversation.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AcceptControlBody} acceptControlBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */


  _createClass(SwitchboardActionsApi, [{
    key: "acceptControlWithHttpInfo",
    value: function acceptControlWithHttpInfo(appId, conversationId, acceptControlBody) {
      var postBody = acceptControlBody; // verify the required parameter 'appId' is set

      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling acceptControl");
      } // verify the required parameter 'conversationId' is set


      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling acceptControl");
      } // verify the required parameter 'acceptControlBody' is set


      if (acceptControlBody === undefined || acceptControlBody === null) {
        throw new Error("Missing the required parameter 'acceptControlBody' when calling acceptControl");
      }

      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}/acceptControl', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Accept Control
     * The acceptControl action transfers the control of the conversation to the pending switchboard integration. When using integration auth scope, a 403 is returned if the pending switchboard integration is not the authenticated integration.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AcceptControlBody} acceptControlBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "acceptControl",
    value: function acceptControl(appId, conversationId, acceptControlBody) {
      return this.acceptControlWithHttpInfo(appId, conversationId, acceptControlBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Offer Control
     * The offerControl action will invite a switchboard integration to accept control of the conversation (changing its status to pending), and trigger a webhook signal to that integration indicating that they have been offered control of the conversation. Invalidates previous offerControl actions.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/OfferControlBody} offerControlBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "offerControlWithHttpInfo",
    value: function offerControlWithHttpInfo(appId, conversationId, offerControlBody) {
      var postBody = offerControlBody; // verify the required parameter 'appId' is set

      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling offerControl");
      } // verify the required parameter 'conversationId' is set


      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling offerControl");
      } // verify the required parameter 'offerControlBody' is set


      if (offerControlBody === undefined || offerControlBody === null) {
        throw new Error("Missing the required parameter 'offerControlBody' when calling offerControl");
      }

      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}/offerControl', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Offer Control
     * The offerControl action will invite a switchboard integration to accept control of the conversation (changing its status to pending), and trigger a webhook signal to that integration indicating that they have been offered control of the conversation. Invalidates previous offerControl actions.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/OfferControlBody} offerControlBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "offerControl",
    value: function offerControl(appId, conversationId, offerControlBody) {
      return this.offerControlWithHttpInfo(appId, conversationId, offerControlBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Pass Control
     * Mark the named switchboard integration as active and transition all the other switchboard integrations to standby status.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/PassControlBody} passControlBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "passControlWithHttpInfo",
    value: function passControlWithHttpInfo(appId, conversationId, passControlBody) {
      var postBody = passControlBody; // verify the required parameter 'appId' is set

      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling passControl");
      } // verify the required parameter 'conversationId' is set


      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling passControl");
      } // verify the required parameter 'passControlBody' is set


      if (passControlBody === undefined || passControlBody === null) {
        throw new Error("Missing the required parameter 'passControlBody' when calling passControl");
      }

      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}/passControl', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Pass Control
     * Mark the named switchboard integration as active and transition all the other switchboard integrations to standby status.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/PassControlBody} passControlBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "passControl",
    value: function passControl(appId, conversationId, passControlBody) {
      return this.passControlWithHttpInfo(appId, conversationId, passControlBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return SwitchboardActionsApi;
}();

exports["default"] = SwitchboardActionsApi;