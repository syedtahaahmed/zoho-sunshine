"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The TelegramAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/TelegramAllOf
 * @version 9.4.5
 */
var TelegramAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TelegramAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/TelegramAllOf
   * @param token {String} Telegram Bot Token.
   */
  function TelegramAllOf(token) {
    _classCallCheck(this, TelegramAllOf);

    TelegramAllOf.initialize(this, token);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(TelegramAllOf, [{
    key: "getType",
    value:
    /**
         * Returns To configure a Telegram integration, acquire the required information from the user and call the Create Integration endpoint. 
         * @return {String}
         */
    function getType() {
      return this.type;
    }
    /**
     * Sets To configure a Telegram integration, acquire the required information from the user and call the Create Integration endpoint. 
     * @param {String} type To configure a Telegram integration, acquire the required information from the user and call the Create Integration endpoint. 
     */

  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns Telegram Bot Token.
         * @return {String}
         */

  }, {
    key: "getToken",
    value: function getToken() {
      return this.token;
    }
    /**
     * Sets Telegram Bot Token.
     * @param {String} token Telegram Bot Token.
     */

  }, {
    key: "setToken",
    value: function setToken(token) {
      this['token'] = token;
    }
    /**
         * Returns Username of the botId
         * @return {String}
         */

  }, {
    key: "getUsername",
    value: function getUsername() {
      return this.username;
    }
    /**
     * Sets Username of the botId
     * @param {String} username Username of the botId
     */

  }, {
    key: "setUsername",
    value: function setUsername(username) {
      this['username'] = username;
    }
    /**
         * Returns A human-friendly name used to identify the integration.
         * @return {String}
         */

  }, {
    key: "getBotId",
    value: function getBotId() {
      return this.botId;
    }
    /**
     * Sets A human-friendly name used to identify the integration.
     * @param {String} botId A human-friendly name used to identify the integration.
     */

  }, {
    key: "setBotId",
    value: function setBotId(botId) {
      this['botId'] = botId;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, token) {
      obj['token'] = token;
    }
    /**
     * Constructs a <code>TelegramAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/TelegramAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/TelegramAllOf} The populated <code>TelegramAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TelegramAllOf();

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('token')) {
          obj['token'] = _ApiClient["default"].convertToType(data['token'], 'String');
        }

        if (data.hasOwnProperty('username')) {
          obj['username'] = _ApiClient["default"].convertToType(data['username'], 'String');
        }

        if (data.hasOwnProperty('botId')) {
          obj['botId'] = _ApiClient["default"].convertToType(data['botId'], 'String');
        }
      }

      return obj;
    }
  }]);

  return TelegramAllOf;
}();
/**
 * To configure a Telegram integration, acquire the required information from the user and call the Create Integration endpoint. 
 * @member {String} type
 * @default 'telegram'
 */


TelegramAllOf.prototype['type'] = 'telegram';
/**
 * Telegram Bot Token.
 * @member {String} token
 */

TelegramAllOf.prototype['token'] = undefined;
/**
 * Username of the botId
 * @member {String} username
 */

TelegramAllOf.prototype['username'] = undefined;
/**
 * A human-friendly name used to identify the integration.
 * @member {String} botId
 */

TelegramAllOf.prototype['botId'] = undefined;
var _default = TelegramAllOf;
exports["default"] = _default;