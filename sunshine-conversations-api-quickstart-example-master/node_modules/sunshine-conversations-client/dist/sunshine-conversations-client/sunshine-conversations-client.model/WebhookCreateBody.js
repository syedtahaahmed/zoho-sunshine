"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _WebhookBody = _interopRequireDefault(require("./WebhookBody"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The WebhookCreateBody model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/WebhookCreateBody
 * @version 9.4.5
 */
var WebhookCreateBody = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>WebhookCreateBody</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookCreateBody
   * @extends module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookBody
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookBody
   * @param target {String} URL to be called when the webhook is triggered.
   * @param triggers {Array.<String>} An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
   */
  function WebhookCreateBody(target, triggers) {
    _classCallCheck(this, WebhookCreateBody);

    _WebhookBody["default"].initialize(this);

    WebhookCreateBody.initialize(this, target, triggers);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(WebhookCreateBody, null, [{
    key: "initialize",
    value: function initialize(obj, target, triggers) {}
    /**
     * Constructs a <code>WebhookCreateBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookCreateBody} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookCreateBody} The populated <code>WebhookCreateBody</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new WebhookCreateBody();

        _WebhookBody["default"].constructFromObject(data, obj);

        _WebhookBody["default"].constructFromObject(data, obj);
      }

      return obj;
    }
  }]);

  return WebhookCreateBody;
}(); // Implement WebhookBody interface:

/**
 * URL to be called when the webhook is triggered.
 * @member {String} target
 */


_WebhookBody["default"].prototype['target'] = undefined;
/**
 * An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
 * @member {Array.<String>} triggers
 */

_WebhookBody["default"].prototype['triggers'] = undefined;
/**
 * A boolean specifying whether webhook payloads should include the complete user schema for events involving a specific user.
 * @member {Boolean} includeFullUser
 * @default false
 */

_WebhookBody["default"].prototype['includeFullUser'] = false;
/**
 * A boolean specifying whether webhook payloads should include the client and device object (when applicable).
 * @member {Boolean} includeFullSource
 * @default false
 */

_WebhookBody["default"].prototype['includeFullSource'] = false;
var _default = WebhookCreateBody;
exports["default"] = _default;