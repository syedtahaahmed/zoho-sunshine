"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The MailgunUpdateAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/MailgunUpdateAllOf
 * @version 9.4.5
 */
var MailgunUpdateAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>MailgunUpdateAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunUpdateAllOf
   */
  function MailgunUpdateAllOf() {
    _classCallCheck(this, MailgunUpdateAllOf);

    MailgunUpdateAllOf.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(MailgunUpdateAllOf, [{
    key: "getHideUnsubscribeLink",
    value:
    /**
         * Returns A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
         * @return {Boolean}
         */
    function getHideUnsubscribeLink() {
      return this.hideUnsubscribeLink;
    }
    /**
     * Sets A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
     * @param {Boolean} hideUnsubscribeLink A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
     */

  }, {
    key: "setHideUnsubscribeLink",
    value: function setHideUnsubscribeLink(hideUnsubscribeLink) {
      this['hideUnsubscribeLink'] = hideUnsubscribeLink;
    }
    /**
         * Returns Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
         * @return {String}
         */

  }, {
    key: "getFromAddress",
    value: function getFromAddress() {
      return this.fromAddress;
    }
    /**
     * Sets Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
     * @param {String} fromAddress Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
     */

  }, {
    key: "setFromAddress",
    value: function setFromAddress(fromAddress) {
      this['fromAddress'] = fromAddress;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>MailgunUpdateAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunUpdateAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunUpdateAllOf} The populated <code>MailgunUpdateAllOf</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new MailgunUpdateAllOf();

        if (data.hasOwnProperty('hideUnsubscribeLink')) {
          obj['hideUnsubscribeLink'] = _ApiClient["default"].convertToType(data['hideUnsubscribeLink'], 'Boolean');
        }

        if (data.hasOwnProperty('fromAddress')) {
          obj['fromAddress'] = _ApiClient["default"].convertToType(data['fromAddress'], 'String');
        }
      }

      return obj;
    }
  }]);

  return MailgunUpdateAllOf;
}();
/**
 * A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
 * @member {Boolean} hideUnsubscribeLink
 */


MailgunUpdateAllOf.prototype['hideUnsubscribeLink'] = undefined;
/**
 * Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
 * @member {String} fromAddress
 */

MailgunUpdateAllOf.prototype['fromAddress'] = undefined;
var _default = MailgunUpdateAllOf;
exports["default"] = _default;