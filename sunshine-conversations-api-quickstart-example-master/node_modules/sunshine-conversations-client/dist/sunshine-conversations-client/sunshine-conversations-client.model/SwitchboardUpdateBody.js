"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The SwitchboardUpdateBody model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardUpdateBody
 * @version 9.4.5
 */
var SwitchboardUpdateBody = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SwitchboardUpdateBody</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardUpdateBody
   */
  function SwitchboardUpdateBody() {
    _classCallCheck(this, SwitchboardUpdateBody);

    SwitchboardUpdateBody.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(SwitchboardUpdateBody, [{
    key: "getEnabled",
    value:
    /**
         * Returns Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
         * @return {Boolean}
         */
    function getEnabled() {
      return this.enabled;
    }
    /**
     * Sets Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
     * @param {Boolean} enabled Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
     */

  }, {
    key: "setEnabled",
    value: function setEnabled(enabled) {
      this['enabled'] = enabled;
    }
    /**
         * Returns The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
         * @return {String}
         */

  }, {
    key: "getDefaultSwitchboardIntegrationId",
    value: function getDefaultSwitchboardIntegrationId() {
      return this.defaultSwitchboardIntegrationId;
    }
    /**
     * Sets The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
     * @param {String} defaultSwitchboardIntegrationId The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
     */

  }, {
    key: "setDefaultSwitchboardIntegrationId",
    value: function setDefaultSwitchboardIntegrationId(defaultSwitchboardIntegrationId) {
      this['defaultSwitchboardIntegrationId'] = defaultSwitchboardIntegrationId;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>SwitchboardUpdateBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardUpdateBody} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardUpdateBody} The populated <code>SwitchboardUpdateBody</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SwitchboardUpdateBody();

        if (data.hasOwnProperty('enabled')) {
          obj['enabled'] = _ApiClient["default"].convertToType(data['enabled'], 'Boolean');
        }

        if (data.hasOwnProperty('defaultSwitchboardIntegrationId')) {
          obj['defaultSwitchboardIntegrationId'] = _ApiClient["default"].convertToType(data['defaultSwitchboardIntegrationId'], 'String');
        }
      }

      return obj;
    }
  }]);

  return SwitchboardUpdateBody;
}();
/**
 * Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
 * @member {Boolean} enabled
 */


SwitchboardUpdateBody.prototype['enabled'] = undefined;
/**
 * The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
 * @member {String} defaultSwitchboardIntegrationId
 */

SwitchboardUpdateBody.prototype['defaultSwitchboardIntegrationId'] = undefined;
var _default = SwitchboardUpdateBody;
exports["default"] = _default;